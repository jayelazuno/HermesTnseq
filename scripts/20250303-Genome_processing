#!/usr/bin/env python

from collections import Counter, OrderedDict, defaultdict
import csv
import os
import operator
import json
import numpy as np
import random

"""
GENOME PROCESSING
"""

SpeciesFileFolderName = input("What should the species file folder name be?: ")
UnmappablesYesOrNo = input("Do you want to make unmappables (Y or N)?: ")

if UnmappablesYesOrNo == "Y":
    Q_Score_Cutoff = input("What is the desired QScore cutoff: ")
    Kmer_Size = int(input("What Kmer size do you want to use?: "))

ForwardGenomeRaw = input("What is the Genome file: ")
basefilename = str(ForwardGenomeRaw)
EditedForwardGenome = "Simplified_" + ForwardGenomeRaw
Reverse_EditedForwardGenome = "Reverse_" + EditedForwardGenome

# Process the genome files
os.system("seqtk seq -l0 " + ForwardGenomeRaw + " > " + EditedForwardGenome)
os.system("seqtk seq -r " + EditedForwardGenome + " > " + Reverse_EditedForwardGenome)

# Get chromosome sizes using faidx
# Index the FASTA file and extract chromosome sizes
os.system("samtools faidx " + ForwardGenomeRaw)
os.system("cut -f1,2 " + ForwardGenomeRaw + ".fai > sizes.genome")

# Read chromosome sizes into a dictionary
chromosome_sizes = {}
with open("sizes.genome", "r") as size_file_input:
    for line in size_file_input:
        sizechrom = line.split()[0].strip()
        size = line.split()[1].strip()
        chromosome_sizes[sizechrom] = size

# Generate k-mers for unmappables if requested
if UnmappablesYesOrNo == "Y":
    Forward_Kmers_File_Name = "Kmers_" + EditedForwardGenome
    with open(Forward_Kmers_File_Name, 'w') as Forward_Kmers_File_Name_ToWrite, open(EditedForwardGenome, "r") as ForwarGenomeToParse:
        for line in ForwarGenomeToParse:
            if ">" in line:
                chrom = line.split(">")[1].strip()
            if ">" not in line:
                UpperBoundLength = len(line)
                i = 0
                iend = i + Kmer_Size
                final_bound = UpperBoundLength - Kmer_Size
                while i != final_bound:
                    kmer = line[i:iend]
                    i += 1
                    iend += 1
                    newread = ">" + chrom + "_(pos)" + str(i) + "\n" + kmer + "\n"
                    Forward_Kmers_File_Name_ToWrite.write(newread)

    Reverse_Kmers_File_Name = "Kmers_" + Reverse_EditedForwardGenome
    with open(Reverse_Kmers_File_Name, 'w') as Reverse_Kmers_File_Name_toWrite, open(Reverse_EditedForwardGenome, 'r') as ReverseGenomeToParse:
        for line in ReverseGenomeToParse:
            if ">" in line:
                chrom = line.split(">")[1].strip()
            if ">" not in line:
                UpperBoundLength = len(line)
                i = 0
                iend = i + Kmer_Size
                final_bound = UpperBoundLength - Kmer_Size
                while i != final_bound:
                    kmer = line[i:iend]
                    i += 1
                    iend += 1
                    newread = ">" + chrom + "_(pos)" + str(i) + "\n" + kmer + "\n"
                    Reverse_Kmers_File_Name_toWrite.write(newread)

# Create directories and indexes for forward and reverse genome
os.system("mkdir " + SpeciesFileFolderName + "_GenomeFiles")
os.system("mkdir " + SpeciesFileFolderName + "_GenomeFiles/Forward")
os.system("mkdir " + SpeciesFileFolderName + "_GenomeFiles/Reverse")
os.system("bowtie2-build " + EditedForwardGenome + " " + SpeciesFileFolderName + "_GenomeFiles/Forward/Forward")
os.system("bowtie2-build " + Reverse_EditedForwardGenome + " " + SpeciesFileFolderName + "_GenomeFiles/Reverse/Reverse")
os.system("mv sizes.genome " + SpeciesFileFolderName + "_GenomeFiles")

if UnmappablesYesOrNo == "Y":
    MappedForwardKmersSamFileName = basefilename.split(".fasta")[0] + ".sam"
    inputcommand = "bowtie2 -p 4 -x " + SpeciesFileFolderName + "_GenomeFiles/Forward/Forward -f " + Forward_Kmers_File_Name + " -S Mapped_" + str(Kmer_Size) + "Kmers_" + MappedForwardKmersSamFileName
    print(inputcommand)
    os.system(inputcommand)

    MappedReverseKmersSamFileName = basefilename.split(".fasta")[0] + ".sam"
    inputcommand = "bowtie2 -p 4 -x " + SpeciesFileFolderName + "_GenomeFiles/Reverse/Reverse -f " + Reverse_Kmers_File_Name + " -S Mapped_Reverse_" + str(Kmer_Size) + "Kmers_" + MappedReverseKmersSamFileName
    os.system(inputcommand)

    # Process unmappables
    Forward_outputname = SpeciesFileFolderName + "_GenomeFiles/" + SpeciesFileFolderName + str(Q_Score_Cutoff) + "UnmappableForward.bed"
    Reverse_outputname = SpeciesFileFolderName + "_GenomeFiles/" + SpeciesFileFolderName + str(Q_Score_Cutoff) + "UnmappableReverse.bed"
    All_outputname = SpeciesFileFolderName + "_GenomeFiles/" + SpeciesFileFolderName + str(Q_Score_Cutoff) + "UnmappableAll.bed"

    with open(Forward_outputname, 'w') as output_Forward_Qscore, open(Reverse_outputname, 'w') as output_Reverse_Qscore, open(All_outputname, 'w') as output_All_Qscore:
        ForwardSamFileName = "Mapped_" + str(Kmer_Size) + "Kmers_" + MappedForwardKmersSamFileName
        ReverseSamFileName = "Mapped_Reverse_" + str(Kmer_Size) + "Kmers_" + MappedReverseKmersSamFileName

        with open(ForwardSamFileName, "r") as sam:
            for line in sam:
                if "(pos)" in line:
                    QscoreTag = 1
                    MdZTag = 1
                    ChromTag = 1
                    LocationTag = 1

                    direction = int(line.split()[1])
                    Qscore = int(line.split()[4])
                    chrom = line.split()[2]
                    startlocation = line.split()[3]

                    if chrom != "*":
                        MDtag = line.split()[17]
                    else:
                        MDtag = "MD:Z:0"

                    CorrectChrom = line.split("(pos)")[0][:-1]
                    CorrectLocation = line.split("(pos)")[1].split()[0]

                    if "MD:Z:0" in MDtag:
                        MdZTag = 0
                    if int(Qscore) <= int(Q_Score_Cutoff):
                        QscoreTag = 0
                    if CorrectChrom != chrom:
                        ChromTag = 0
                    if int(CorrectLocation) != int(startlocation):
                        LocationTag = 0

                    if MdZTag == 0 or QscoreTag == 0 or ChromTag == 0 or LocationTag == 0 or direction == 16:
                        output_Forward_Qscore.write(CorrectChrom + "\t" + CorrectLocation + "\t" + CorrectLocation + "\t.\t500\t+\n")
                        output_All_Qscore.write(CorrectChrom + "\t" + CorrectLocation + "\t" + CorrectLocation + "\t.\t500\t+\n")

        with open(ReverseSamFileName, "r") as sam:
            for line in sam:
                if "(pos)" in line:
                    QscoreTag = 1
                    MdZTag = 1
                    ChromTag = 1
                    LocationTag = 1

                    direction = int(line.split()[1])
                    Qscore = int(line.split()[4])
                    chrom = line.split()[2]
                    startlocation = line.split()[3]

                    if chrom != "*":
                        MDtag = line.split()[17]
                    else:
                        MDtag = "MD:Z:0"

                    CorrectChrom = line.split("(pos)")[0][:-1]
                    CorrectLocation = line.split("(pos)")[1].split()[0]

                    if "MD:Z:0" in MDtag:
                        MdZTag = 0
                    if int(Qscore) <= int(Q_Score_Cutoff):
                        QscoreTag = 0
                    if CorrectChrom != chrom:
                        ChromTag = 0
                    if int(CorrectLocation) != int(startlocation):
                        LocationTag = 0

                    if MdZTag == 0 or QscoreTag == 0 or ChromTag == 0 or LocationTag == 0 or direction == 16:
                        for chromosome_key, chromosome_value in chromosome_sizes.items():
                            chromosome_key_raw = chromosome_key.strip()
                            if chromosome_key_raw == CorrectChrom:
                                CorrectLocation = str(abs(int(chromosome_value) - int(CorrectLocation)) + 1)

                        output_Reverse_Qscore.write(CorrectChrom + "\t" + CorrectLocation + "\t" + CorrectLocation + "\t.\t500\t-\n")
                        output_All_Qscore.write(CorrectChrom + "\t" + CorrectLocation + "\t" + CorrectLocation + "\t.\t500\t-\n")